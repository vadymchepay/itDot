/** ============================
    mixin
    ======================== **/
@mixin css3-prefix($property, $value) {
	-webkit-#{$property}: #{$value};
//	-khtml-#{$property}: #{$value};
	-moz-#{$property}: #{$value}; 
//	-ms-#{$property}: #{$value};
	-o-#{$property}: #{$value}; 
	#{$property}: #{$value};
}

@mixin transition($time: 0.35s) {
	@include css3-prefix('transition', all $time ease);
}
@mixin transition-custom($transition) {
	@include css3-prefix('transition', $transition);
}


@mixin font-size-lh($size: 1.6, $line: normal) {
	font-size: $size + px;
	@if $line == normal {
		line-height: normal;
	} @else {
		line-height: $line + px;
	}
}
@mixin font-size-rem($size:1.6, $line: normal){
	font-size: $size/10 + 0rem;
	@if $line == normal {
		line-height: normal;
	} @else {
		line-height: $line/10 + 0rem;
	}
}
@mixin img-responsive($display: block) {
	display: $display;
	width: 100%;
	max-width: 100%;
	height: auto;
}

@mixin placeholder($color: $color, $font: $font-Light, $opacity: 1) {
	&::-webkit-input-placeholder {
		color: $color;
		opacity: $opacity;
		font-family: $font;
	}
	&::-moz-placeholder {
		/* Firefox 18- */
		color: $color;
		opacity: $opacity;
		font-family: $font;
	}
	&:-ms-input-placeholder {
		color: $color;
		opacity: $opacity;
		font-family: $font;
	}
}

@mixin width($w, $p) {
	width: $w - $p*2 + 0px;
}

@mixin translateY($y) {
	transform: translateY($y);
	-moz-transform: translateY($y);
	-ms-transform: translateY($y);
	-o-transform: translateY($y);
	-webkit-transform: translateY($y);
}

@mixin box-shadow($box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3)) {
	@include css3-prefix('box-shadow', $box-shadow);
}

@mixin hide-text {
	overflow: hidden;
	text-indent: -9000px;
	display: block;
}

@mixin sidebar-right($w) {
	margin-left: -$w;
	width: $w;
}

@mixin main-content($pl, $pr) {
	padding-left: $pl;
	padding-right: $pr;
}
@mixin inline-block ($va: middle) {
	display: inline-block;
	*display: inline;
	zoom: 1;
	vertical-align: $va;
}

@mixin clearfix() {
	*zoom: 1;
	&:before,
	&:after {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
}
@mixin text-truncate {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}
// Generated content
@mixin generated-content($width: 0, $height: 0) {
	content: "";
	display: block;
	height: $height;
	position: absolute;
	width: $width;
}

@function calculateRem($size) {
	$remSize: $size / 16px;
	@return $remSize * 1rem;
}

@mixin font-size($size: 16px) {
	font-size: $size;
	font-size: calculateRem($size);
}
@mixin font-size-2($size: 1.6, $line: 1) {
    font-size: $size + px;
    line-height: ($line/$size);
}

// Gradients for IE
@mixin filter-gradient($start-color, $end-color, $orientation: vertical) {
	$gradient-type: if ($orientation == vertical, 0, 1);
	-ms-filter: "progid:DXImageTransform.Microsoft.gradient( gradientType=#{$gradient-type}, startColorstr='#{ie-hex-str( $start-color )}', endColorstr='#{ie-hex-str( $end-color )}' )";
	filter: progid:DXImageTransform.Microsoft.gradient(gradientType=#{$gradient-type}, startColorstr="#{ie-hex-str( $start-color )}", endColorstr="#{ie-hex-str( $end-color )}");
}

// Inline icons
@mixin inline-icon($width: 0, $height: 0, $margin: 0) {
	display: inline-block;
	height: $height;
	margin: $margin;
	vertical-align: middle;
	width: $width;
}
@mixin translate($x, $y) {
	transform: translate($x, $y);
	-moz-transform: translate($x, $y);
	-ms-transform: translate($x, $y);
	-o-transform: translate($x, $y);
	-webkit-transform: translate($x, $y);
}
@mixin translateY($y) {
	transform: translateY($y);
	-moz-transform: translateY($y);
	-ms-transform: translateY($y);
	-o-transform: translateY($y);
	-webkit-transform: translateY($y);
}
@mixin translateX($x) {
	transform: translateX($x);
	-moz-transform: translateX($x);
	-ms-transform: translateX($x);
	-o-transform: translateX($x);
	-webkit-transform: translateX($x);
}
@mixin respond-min($min){
	@media only screen and (min-width: $min) {
		@content;
	}
}
@mixin respond-to($media) {
	// width < 768px
	@if $media == xs {
		@media only screen and (max-width: $screen-xs-max) {
			@content;
		}
	}
	// width > 768px
	@if $media == sm {
		@media only screen and (min-width: $screen-sm-min) {
			@content;
		}
	}
	// width > 992px
	@if $media == md {
		@media only screen and (min-width: $screen-md-min) {
			@content;
		}
	}
	// width > 1200px
	@if $media == lg {
		@media only screen and (min-width: $screen-lg-min) {
			@content;
		}
	}
		// width: 768px - 991px
	@else if $media == sm-min-sm-max {
		@media only screen and (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
			@content;
		}
	}

		// width: 992px - 1199px
	@else if $media == md-min-md-max {
		@media only screen and (min-width: $screen-md-min) and (max-width: $screen-md-max) {
			@content;
		}
	}

	// width < 992px
	@if $media == sm-max {
		@media only screen and (max-width: $screen-sm-max) {
			@content;
		}
	}

	// width < 1200px
	@if $media == lg-min {
		@media only screen and (max-width: $screen-lg-min) {
			@content;
		}
	}

	// width < 1572px
	@if $media == 1572 {
		@media only screen and (max-width: 1572px) {
			@content;
		}
	}

	// width < 479
	@if $media == 479 {
		@media only screen and (max-width: 479px) {
			@content;
		}
	}
}
@mixin respond-from-to($from, $to){
	@media only screen and (min-width: $from) and (max-width: $to)  {
		@content;
	}
}
@mixin widthscreen($w) {
	width: (100% * $w)/1920;
}
/* BACKGROUND GRADIENT */
@mixin background-gradient($startColor: #3C3C3C, $endColor: #999999) {
	background-color: $startColor;
	background-image: -webkit-gradient(linear, left top, left bottom, from($startColor), to($endColor));
	background-image: -webkit-linear-gradient(top, $startColor, $endColor);
	background-image:    -moz-linear-gradient(top, $startColor, $endColor);
	background-image:     -ms-linear-gradient(top, $startColor, $endColor);
	background-image:      -o-linear-gradient(top, $startColor, $endColor);
	background-image:         linear-gradient(top, $startColor, $endColor);
	filter:            progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}');
}

/* BACKGROUND HORIZONTAL */
@mixin background-horizontal($startColor: #3C3C3C, $endColor: #999999) {
	background-color: $startColor;
	background-image: -webkit-gradient(linear, left top, right top, from($startColor), to($endColor));
	background-image: -webkit-linear-gradient(left, $startColor, $endColor);
	background-image:    -moz-linear-gradient(left, $startColor, $endColor);
	background-image:     -ms-linear-gradient(left, $startColor, $endColor);
	background-image:      -o-linear-gradient(left, $startColor, $endColor);
	background-image:         linear-gradient(left, $startColor, $endColor);
	filter:            progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}', gradientType='1');
}

/* BACKGROUND RADIAL */
@mixin background-radial($startColor: #FFFFFF, $startPos: 0%, $endColor: #000000, $endPos:100%) {
	background: -moz-radial-gradient(center, ellipse cover, $startColor $startPos, $endColor $endPos);
	background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop($startPos,$startColor), color-stop($endPos,$endColor));
	background: -webkit-radial-gradient(center, ellipse cover, $startColor $startPos,$endColor $endPos);
	background: -o-radial-gradient(center, ellipse cover, $startColor $startPos,$endColor $endPos);
	background: -ms-radial-gradient(center, ellipse cover, $startColor $startPos,$endColor $endPos);
	background: radial-gradient(ellipse at center, $startColor $startPos,$endColor $endPos);
}

/* BORDER RADIUS */
@mixin border-radius($radius: 5px) {
	@include css3-prefix('border-radius', $radius);
}
/* BORDER  */
@mixin border($border-width: 1px, $border-style: solid, $top-color: #fff, $right-color: #fff, $bottom-color: #fff, $left-color: #fff) {
	border: $border-width $border-style;
	border-top-color: $top-color;
	border-right-color: $right-color;
	border-bottom-color: $bottom-color;
	border-left-color: $left-color;
}
@mixin border-radius-separate($topLeftRadius: 5px, $topRightRadius: 5px, $bottomLeftRadius: 5px, $bottomRightRadius: 5px) {
	-webkit-border-top-left-radius:     $topLeftRadius;
	-webkit-border-top-right-radius:    $topRightRadius;
	-webkit-border-bottom-right-radius: $bottomRightRadius;
	-webkit-border-bottom-left-radius:  $bottomLeftRadius;

	-moz-border-radius-topleft:     $topLeftRadius;
	-moz-border-radius-topright:    $topRightRadius;
	-moz-border-radius-bottomright: $bottomRightRadius;
	-moz-border-radius-bottomleft:  $bottomLeftRadius;

	border-top-left-radius:     $topLeftRadius;
	border-top-right-radius:    $topRightRadius;
	border-bottom-right-radius: $bottomRightRadius;
	border-bottom-left-radius:  $bottomLeftRadius;
}

/* BOX SIZING */
@mixin box-sizing($type: border-box) {
	@include css3-prefix('box-sizing', $type);
}

/* COLUMNS */
@mixin columns($count: 3, $gap: 10) {
	@include css3-prefix('column-count', $count);
	@include css3-prefix('column-gap', $gap);
}

/* DOUBLE BORDERS */
@mixin double-borders($colorOne: #3C3C3C, $colorTwo: #999999, $radius: 0) {
	border: 1px solid $colorOne;

	@include css3-prefix('box-shadow', 0 0 0 1px $colorTwo);

	@include border-radius( $radius );
}

/* FLEX */
@mixin flex($value: 1) {
	@include css3-prefix('box-flex', $value);
}

/* FLIP */
@mixin flip($scaleX: -1) {
	@include css3-prefix('transform', scaleX($scaleX));
	filter:            FlipH;
	-ms-filter:        "FlipH";
}

/* FONT FACE */
@mixin font-face($fontFamily: myFont, $eotFileSrc: 'myFont.eot', $woffFileSrc: 'myFont.woff', $ttfFileSrc: 'myFont.ttf', $svgFileSrc: 'myFont.svg', $svgFontID: '#myFont') {
	font-family: $fontFamily;
	src: url($eotFileSrc)  format('eot'),
	url($woffFileSrc) format('woff'),
	url($ttfFileSrc)  format('truetype'),
	url($svgFileSrc + $svgFontID) format('svg');
}

/* OPACITY */
@mixin opacity($opacity: 0.5) {
	$opacityMultiplied: ($opacity * 100);

	filter:         alpha(opacity=$opacityMultiplied);
	-ms-filter:     "progid:DXImageTransform.Microsoft.Alpha(Opacity=" + $opacityMultiplied + ")";
	@include css3-prefix('opacity', $opacity);
}

/* OUTLINE RADIUS */
@mixin outline-radius($radius: 5px) {
	@include css3-prefix('outline-radius', $radius);
}

/* RESIZE */
@mixin resize($direction: both) {
	@include css3-prefix('resize', $direction);
}

/* ROTATE*/
@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {
	@include css3-prefix('transform', rotate($deg + deg));
	filter: progid:DXImageTransform.Microsoft.Matrix(
					M11=#{$m11}, M12=#{$m12}, M21=#{$m21}, M22=#{$m22}, sizingMethod='auto expand');
	zoom: 1;
}

/* TEXT SHADOW */
@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0,0,0,.4)) {
	text-shadow: $x $y $blur $color;
}

/* TRANSFORM  */
@mixin transform($params) {
	@include css3-prefix('transform', $params);
}

/* TRANSFORM STYLE */
@mixin transform-style($style: preserve-3d) {
	@include css3-prefix('transform-style', $style);
}
/* TRIPLE BORDERS */
@mixin triple-borders($colorOne: #3C3C3C, $colorTwo: #999999, $colorThree: #000000, $radius: 0) {
	border: 1px solid $colorOne;

	@include border-radius($radius);

	@include css3-prefix('box-shadow', 0 0 0 1px $colorTwo, 0 0 0 2px $colorThree);
}

/* KEYFRAMES */
@mixin keyframesAnimation($animation-name) {
	@-webkit-keyframes #{$animation-name} {
		@content;
	}
	@-moz-keyframes #{$animation-name} {
		@content;
	}
	@-ms-keyframes #{$animation-name} {
		@content;
	}
	@-o-keyframes #{$animation-name} {
		@content;
	}
	@keyframes #{$animation-name} {
		@content;
	}
}

/* ANIMATION */
@mixin animation($str) {
	@include css3-prefix('animation', $str);
}


@function em($pixels, $context: $browser-context) {
	@return #{$pixels/$context}em
}
@function lh($pixels, $context: $browser-context) {
	@return #{$pixels/$context}
}
